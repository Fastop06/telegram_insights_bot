#8362535744:AAHL5qlEzxHuRDootKsgt6yGCOBlD-BA5n8 —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

import telebot
from telebot import types
import sqlite3
import re
import random
import time
from datetime import datetime
import os

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
TOKEN = "8362535744:AAHL5qlEzxHuRDootKsgt6yGCOBlD-BA5n8"
ADMIN_ID = 7136544022
DB_FILE = "insight.db"
MODERATION_DELAY = 0      # —Å–µ–∫—É–Ω–¥—ã (0 –¥–ª—è —Ç–µ—Å—Ç–∞)
COOLDOWN_MINUTES = 1      # –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
MAX_INSIGHTS_PER_HOUR = 5  # —Å–∫–æ–ª—å–∫–æ –∏–Ω—Å–∞–π—Ç–æ–≤ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Å

bot = telebot.TeleBot(TOKEN)

# ========== DB helpers ==========
def get_conn():
    return sqlite3.connect(DB_FILE)



def init_db():
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()

    # --- Users ---
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        reg_date TEXT,
        has_posted INTEGER DEFAULT 0,
        last_request REAL DEFAULT 0,
        messages_sent INTEGER DEFAULT 0,
        last_post_time REAL DEFAULT 0,
        posts_in_hour INTEGER DEFAULT 0
    )
    """)

    # --- Insights ---
    cur.execute("""
    CREATE TABLE IF NOT EXISTS insights (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        author_id INTEGER,
        text TEXT,
        is_flagged INTEGER DEFAULT 0,
        created_at REAL
    )
    """)

    # --- Delivered ---
    cur.execute("""
    CREATE TABLE IF NOT EXISTS delivered (
        user_id INTEGER,
        insight_id INTEGER,
        PRIMARY KEY (user_id, insight_id)
    )
    """)

    # --- Reports ---
    cur.execute("""
    CREATE TABLE IF NOT EXISTS reports (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        insight_id INTEGER,
        user_id INTEGER,
        reason TEXT,
        created_at REAL
    )
    """)

    conn.commit()
    conn.close()

init_db()

# ========== –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ==========
BAD_WORD_ROOTS = ["–±–ª—è–¥", "—Ö—É", "–ø–∏–∑–¥", "–µ–±–∞", "–±–ª—è", "—Å—É–∫–∞", "–º—É–¥", "–≥–∞–Ω–¥–æ–Ω", "—Ç–≤–∞—Ä"]
CONTACT_RE = re.compile(r"(\+?\d[\d\-\s]{6,}\d|@[\w_]{3,}|https?://\S+|www\.\S+|\S+@\S+\.\S+)", re.IGNORECASE)

def normalize_for_profanity(s: str) -> str:
    s = s.lower()
    subs = {'6':'–±','3':'–µ','4':'—á','1':'–ª','0':'–æ','@':'–∞','$':'—Å','5':'—Å'}
    for k,v in subs.items():
        s = s.replace(k, v)
    s = re.sub(r'[^–∞-—èa-z]', '', s)
    s = re.sub(r'(.)\1{2,}', r'\1', s)
    return s

def validate_insight_text(text: str):
    if not text or not text.strip():
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–Ω—Å–∞–π—Ç–∞."
    if len(text) > 800 or len(text) < 3:
        return "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 800) –ª–∏–±–æ —Å–ª–∏—à–∫–æ–º –∫—Ä–æ—Ç–∫–∏–π (–º–∏–Ω 3). –ü–æ–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
    if CONTACT_RE.search(text):
        return "–ü–æ—Ö–æ–∂–µ, –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏. –£–¥–∞–ª–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
    norm = normalize_for_profanity(text)
    for root in BAD_WORD_ROOTS:
        if root in norm:
            return "üö´ –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."
    return None

# ========== DB –æ–ø–µ—Ä–∞—Ü–∏–∏ ==========
def ensure_user(uid, username=""):
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute(
        "INSERT OR IGNORE INTO users (user_id, username, reg_date) VALUES (?, ?, ?)",
        (uid, username or "", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    if cur.rowcount > 0:  # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω
        log_new_user(uid, username)
    conn.commit()
    conn.close()

def get_username(uid):
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute("SELECT username FROM users WHERE user_id=?", (uid,))
    row = cur.fetchone()
    conn.close()
    return row[0] if row and row[0] else "(–Ω–µ—Ç –∏–º–µ–Ω–∏)"

def log_new_user(user_id, username):
    text = f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {user_id}\nUsername: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    bot.send_message(LOG_CHAT_ID, text)

def save_insight(uid, text):
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO insights (author_id, text, created_at) VALUES (?, ?, ?)",
                (uid, text, time.time()))
    iid = cur.lastrowid
    conn.commit()
    conn.close()

    username = get_username(uid)
    log_event("new_insight", insight_id=iid, username=username, text=text)
    return iid

def mark_user_posted(user_id):
    conn = get_conn(); cur = conn.cursor()
    cur.execute("UPDATE users SET has_posted=1, messages_sent = messages_sent + 1 WHERE user_id=?", (user_id,))
    conn.commit(); conn.close()

def get_user_info(user_id):
    conn = get_conn(); cur = conn.cursor()
    cur.execute("SELECT username, reg_date, has_posted, messages_sent, last_request FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone(); conn.close()
    return row

def get_random_insight_for_requester(requester_id, min_age_seconds=MODERATION_DELAY):
    cutoff = time.time() - max(0, min_age_seconds)
    conn = get_conn(); cur = conn.cursor()
    cur.execute("""
        SELECT id, text, author_id FROM insights
        WHERE is_flagged=0 AND author_id != ? AND created_at < ?
        AND id NOT IN (SELECT insight_id FROM delivered WHERE user_id=?)
        ORDER BY RANDOM() LIMIT 1
    """, (requester_id, cutoff, requester_id))
    row = cur.fetchone(); conn.close()
    return row

def mark_delivered(user_id, insight_id):
    conn = get_conn(); cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO delivered (user_id, insight_id) VALUES (?, ?)", (user_id, insight_id))
    conn.commit(); conn.close()

def set_user_cooldown(user_id, minutes=COOLDOWN_MINUTES):
    conn = get_conn(); cur = conn.cursor()
    cur.execute("UPDATE users SET last_request=? WHERE user_id=?", (time.time() + minutes*60, user_id))
    conn.commit(); conn.close()

def check_cooldown(user_id):
    conn = get_conn(); cur = conn.cursor()
    cur.execute("SELECT last_request FROM users WHERE user_id=?", (user_id,))
    r = cur.fetchone(); conn.close()
    if r and r[0] and r[0] > time.time():
        remaining = int((r[0] - time.time()) // 60) + 1
        return remaining
    return 0

def flag_insight(insight_id):
    conn = get_conn(); cur = conn.cursor()
    cur.execute("UPDATE insights SET is_flagged=1 WHERE id=?", (insight_id,))
    conn.commit(); conn.close()

def get_insight_by_id(iid):
    conn = get_conn(); cur = conn.cursor()
    cur.execute("SELECT id, author_id, text, is_flagged, created_at FROM insights WHERE id=?", (iid,))
    row = cur.fetchone(); conn.close()
    return row


def save_report(insight_id, user_id, reason, is_general=False):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂–∞–ª–æ–±—É –≤ –ë–î –∏ —à–ª—ë—Ç –ª–æ–≥ –≤ LOG_CHAT_ID.
    :param insight_id: ID –∏–Ω—Å–∞–π—Ç–∞ (–∏–ª–∏ None –¥–ª—è –æ–±—â–µ–π –∂–∞–ª–æ–±—ã)
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param reason: —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã
    :param is_general: True –µ—Å–ª–∏ —ç—Ç–æ –æ–±—â–∞—è –∂–∞–ª–æ–±–∞, False –µ—Å–ª–∏ –Ω–∞ –∏–Ω—Å–∞–π—Ç
    """
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO reports (insight_id, user_id, reason, created_at)
        VALUES (?, ?, ?, ?)
    """, (insight_id, user_id, reason, time.time()))
    conn.commit()
    conn.close()

    # –ª–æ–≥ –≤ —á–∞—Ç
    if is_general:
        text = f"‚ö†Ô∏è –û–±—â–∞—è –∂–∞–ª–æ–±–∞\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n–¢–µ–∫—Å—Ç: {reason}"
    else:
        text = f"üö® –ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–Ω—Å–∞–π—Ç #{insight_id}\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"

    try:
        bot.send_message(LOG_CHAT_ID, text)
    except Exception as e:
        print("[LOG ERROR]", e)

# ========== Temp preview storage ==========
# temp_previews[temp_id] = (user_id, text)
temp_previews = {}
def make_temp_id():
    return int(time.time() * 1000) ^ random.randint(1, 999999)

# ========== –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ==========
def cleanup_old_data():
    """
    –£–¥–∞–ª—è–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏ –∂–∞–ª–æ–±—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π.
    –ó–∞–ø—É—Å–∫–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00 –ø–æ –ú–°–ö —á–µ—Ä–µ–∑ threading –∏–ª–∏ cron.
    """
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    seven_days_ago = time.time() - 7*24*60*60

    # –£–¥–∞–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    cur.execute("DELETE FROM insights WHERE created_at < ?", (seven_days_ago,))

    # –£–¥–∞–ª—è–µ–º –∂–∞–ª–æ–±—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    cur.execute("DELETE FROM reports WHERE created_at < ?", (seven_days_ago,))

    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É delivered, —á—Ç–æ–±—ã –Ω–µ —Å—Å—ã–ª–∞–ª–∞—Å—å –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    cur.execute("""
        DELETE FROM delivered 
        WHERE insight_id NOT IN (SELECT id FROM insights)
    """)

    conn.commit()
    conn.close()
    print("[CLEANUP] –°—Ç–∞—Ä—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –∂–∞–ª–æ–±—ã —É–¥–∞–ª–µ–Ω—ã.")

def schedule_cleanup():
    import time
    import threading
    from datetime import timedelta

    def run_daily():
        while True:
            now = datetime.now()
            # –†–∞—Å—á—ë—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π 00:00
            next_run = datetime.combine(now.date() + timedelta(days=1), datetime.min.time())
            wait_seconds = (next_run - now).total_seconds()
            time.sleep(wait_seconds)
            cleanup_old_data()

    threading.Thread(target=run_daily, daemon=True).start()

# –í—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
schedule_cleanup()


LOG_CHAT_ID = -1003026651234  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤

def log_event(event_type, **kwargs):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ Telegram –∏ –∫–æ–Ω—Å–æ–ª—å.
    event_type: "new_user", "new_insight", "report_insight", "general_report"
    kwargs: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    text = ""
    if event_type == "new_user":
        uid = kwargs.get("user_id")
        username = kwargs.get("username") or "(–Ω–µ—Ç –∏–º–µ–Ω–∏)"
        text = f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nID: {uid}\nUsername: {username}"

    elif event_type == "new_insight":
        iid = kwargs.get("insight_id")
        username = kwargs.get("username") or "(–Ω–µ—Ç –∏–º–µ–Ω–∏)"
        text = kwargs.get("text")
        text = f"‚úç –ù–æ–≤—ã–π –∏–Ω—Å–∞–π—Ç\nID –∏–Ω—Å–∞–π—Ç–∞: {iid}\n–ê–≤—Ç–æ—Ä: @{username}\n–¢–µ–∫—Å—Ç:{text}"

    elif event_type == "report_insight":
        iid = kwargs.get("insight_id")
        reporter = kwargs.get("reporter_id")
        reason = kwargs.get("reason")
        text = (f"üö® –ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–Ω—Å–∞–π—Ç\nID –∏–Ω—Å–∞–π—Ç–∞: {iid}\n"
                f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reporter}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

    elif event_type == "general_report":
        reporter = kwargs.get("reporter_id")
        reason = kwargs.get("reason")
        text = f"‚ö†Ô∏è –û–±—â–∞—è –∂–∞–ª–æ–±–∞\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reporter}\n–¢–µ–∫—Å—Ç: {reason}"

    if text:
        print("[LOG]", text)  # –í –∫–æ–Ω—Å–æ–ª—å
        try:
            bot.send_message(LOG_CHAT_ID, text)  # –í —á–∞—Ç –ª–æ–≥–æ–≤
        except Exception as e:
            print("[LOG ERROR]", e)

# ========== UI –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üñä –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å–∞–π—Ç", "üé≤ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç")
    kb.add("‚ÑπÔ∏è –û –±–æ—Ç–µ", "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
    return kb

def insight_inline_kb(iid):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üîÅ –ï—â—ë –∏–Ω—Å–∞–π—Ç", callback_data="more"),
        types.InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share:{iid}"),
        types.InlineKeyboardButton("üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report:{iid}")
    )
    return kb

def can_post_n_per_hour(uid):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∏–Ω—Å–∞–π—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç."""
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cutoff = time.time() - 3600  # 1 —á–∞—Å –Ω–∞–∑–∞–¥
    cur.execute("SELECT COUNT(*) FROM insights WHERE author_id=? AND created_at>=?", (uid, cutoff))
    count = cur.fetchone()[0]
    conn.close()
    if count >= MAX_INSIGHTS_PER_HOUR:
        return False, MAX_INSIGHTS_PER_HOUR - count
    return True, MAX_INSIGHTS_PER_HOUR - count

def can_post_insight(uid):
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute("SELECT last_post_time, posts_in_hour FROM users WHERE user_id=?", (uid,))
    row = cur.fetchone()

    now = time.time()
    if not row:
        conn.close()
        return True  # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –ë–î ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å

    last_post_time, posts_in_hour = row

    # –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    if now - last_post_time > 3600:
        cur.execute("UPDATE users SET posts_in_hour=0, last_post_time=? WHERE user_id=?",
                    (now, uid))
        conn.commit()
        conn.close()
        return True

    # –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç
    if posts_in_hour >= MAX_INSIGHTS_PER_HOUR:
        conn.close()
        return False

    conn.close()
    return True


def increment_post_counter(uid):
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute("SELECT last_post_time, posts_in_hour FROM users WHERE user_id=?", (uid,))
    row = cur.fetchone()

    now = time.time()
    if not row:
        cur.execute("INSERT OR IGNORE INTO users (user_id, last_post_time, posts_in_hour) VALUES (?, ?, ?)",
                    (uid, now, 1))
    else:
        last_post_time, posts_in_hour = row
        if now - last_post_time > 3600:
            cur.execute("UPDATE users SET posts_in_hour=1, last_post_time=? WHERE user_id=?",
                        (now, uid))
        else:
            cur.execute("UPDATE users SET posts_in_hour=posts_in_hour+1, last_post_time=? WHERE user_id=?",
                        (now, uid))

    conn.commit()
    conn.close()

def preview_kb(temp_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data=f"preview_send:{temp_id}"))
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"preview_edit:{temp_id}"),
           types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"preview_cancel:{temp_id}"))
    return kb

START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–Ω—Å–∞–π—Ç ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –º—ã—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π.\n"
    "–û—Ç–ø—Ä–∞–≤–ª—è–π –∫–æ—Ä–æ—Ç–∫—É—é –º—ã—Å–ª—å ‚Äî –∏ –ø–æ–ª—É—á–∞–π —á—É–∂—É—é –≤ –æ—Ç–≤–µ—Ç.\n\n"
    "–í–∞–∂–Ω–æ: –Ω–µ –ø–∏—à–∏—Ç–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ª–µ—Ñ–æ–Ω—ã, –§–ò–û, –ø–∞—Ä–æ–ª–∏). –û—Ç–ø—Ä–∞–≤–ª—è—è ‚Äî –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.\n"
    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: üñä –ù–∞–ø–∏—Å–∞—Ç—å / üé≤ –ü–æ–ª—É—á–∏—Ç—å / ‚ÑπÔ∏è –û –±–æ—Ç–µ"
)

ABOUT_TEXT = (
    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n"
    "–¢—ã –ø–∏—à–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏–Ω—Å–∞–π—Ç.\n"
    "–î—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–≤–æ—è –º—ã—Å–ª—å.\n\n"
    "–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á—É–∂—É—é –º—ã—Å–ª—å ‚Äî –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å–∞–º –Ω–∞–ø–∏—Å–∞–ª.\n"
    "–ü—Ä–∞–≤–∏–ª–∞: –º–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤, –º–∏–Ω–∏–º—É–º 3; –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Å—Å—ã–ª–∫–∏ –∏ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º.\n"
    "–ù–∞–∂–º–∏ üñä —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
)

# ========== HANDLERS ==========

@bot.message_handler(commands=["admin"])
def cmd_admin(m):
    if m.from_user.id != ADMIN_ID:
        bot.send_message(m.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ø—Ä—è–º–æ —Ç—É—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πü§µ", callback_data="admin_users"),
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤üé´", callback_data="admin_insights"),
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±üî¥", callback_data="admin_reports")
    )
    bot.send_message(m.chat.id, "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)

@bot.message_handler(commands=["start"])
def cmd_start(m):
    ensure_user(m.from_user.id, m.from_user.username or "")
    ensure_user(m.from_user.id, getattr(m.from_user, "username", "") or "")
    bot.send_message(m.chat.id, START_TEXT, reply_markup=main_menu_kb())

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
def cmd_about(m):
    ensure_user(m.from_user.id, m.from_user.username or "")
    bot.send_message(m.chat.id, ABOUT_TEXT, reply_markup=main_menu_kb())

# --- –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å–∞–π—Ç ---
@bot.message_handler(func=lambda m: m.text == "üñä –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å–∞–π—Ç")
def cmd_write(m):
    ensure_user(m.from_user.id, m.from_user.username or "")
    ensure_user(m.from_user.id, getattr(m.from_user, "username", "") or "")
    sent = bot.send_message(m.chat.id,
                            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∏–Ω—Å–∞–π—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–º–∞–∫—Å 800 —Å–∏–º–≤–æ–ª–æ–≤, –º–∏–Ω 3). –ù–µ —É–∫–∞–∑—ã–≤–∞–π –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ–º–µ—Ä–∞, e-mail –∏ —Å—Å—ã–ª–∫–∏.\n–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—à—å ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ¬ª.",
                            reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(sent, step_preview)

def step_preview(message):
    err = validate_insight_text(message.text)
    if err:
        bot.send_message(message.chat.id, err, reply_markup=main_menu_kb())
        return
    temp_id = make_temp_id()
    temp_previews[temp_id] = (message.from_user.id, message.text)
    bot.send_message(message.chat.id, f"–¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ:\n¬´{message.text}¬ª", reply_markup=preview_kb(temp_id))

# --- –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç ---
@bot.message_handler(func=lambda m: m.text == "üé≤ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç")
def cmd_get(m):
    ensure_user(m.from_user.id, m.from_user.username or "")
    ensure_user(m.from_user.id, getattr(m.from_user, "username", "") or "")
    info = get_user_info(m.from_user.id)
    if not info or int(info[2]) == 0:  # has_posted at index 2
        bot.send_message(m.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π. –ù–∞–∂–º–∏ üñä –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å–∞–π—Ç.", reply_markup=main_menu_kb())
        return

    cd = check_cooldown(m.from_user.id)
    if cd > 0:
        bot.send_message(m.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏: –µ—â—ë —Ä–∞–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Å–∞–π—Ç (–∫—É–ª–¥–∞—É–Ω {cd} –º–∏–Ω).")
        return

    row = get_random_insight_for_requester(m.from_user.id)
    if not row:
        bot.send_message(m.chat.id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb())
        return

    iid, text, author_id = row
    mark_delivered(m.from_user.id, iid)
    set_user_cooldown(m.from_user.id, minutes=COOLDOWN_MINUTES)
    bot.send_message(m.chat.id, f"–í–æ—Ç –∏–Ω—Å–∞–π—Ç:\n¬´{text}¬ª", reply_markup=insight_inline_kb(iid))

# --- –ñ–∞–ª–æ–±–∞ –∏–∑ –º–µ–Ω—é (–æ–±—â–∞—è) ---
waiting_general_report = set()

@bot.message_handler(func=lambda m: m.text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
def cmd_general_report(m):
    ensure_user(m.from_user.id, m.from_user.username or "")
    ensure_user(m.from_user.id, getattr(m.from_user, "username", "") or "")
    waiting_general_report.add(m.from_user.id)
    sent = bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=types.ReplyKeyboardRemove())

    def after_general(msg):
        reason = msg.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
        save_report(None, msg.from_user.id, reason, is_general=True)

        # ‚úÖ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(msg.chat.id, "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!", reply_markup=main_menu_kb())

        # üì¢ –∞–¥–º–∏–Ω—É
        bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è –û–±—â–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç @{msg.from_user.username or msg.from_user.id}:\n{reason}"
        )

    bot.register_next_step_handler(sent, after_general)

def handle_general_report(message):
    uid = message.from_user.id
    waiting_general_report.discard(uid)
    if message.content_type == "text":
        reason = message.text
        save_report(None, uid, reason)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É.", reply_markup=main_menu_kb())
        bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û–±—â–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç {uid}:\n{reason}")
    elif message.content_type == "photo":
        caption = message.caption or ""
        save_report(None, uid, f"[photo] {caption}")
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É.", reply_markup=main_menu_kb())
        bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=f"‚ö†Ô∏è –û–±—â–∞—è –∂–∞–ª–æ–±–∞ (—Ñ–æ—Ç–æ) –æ—Ç {uid}:\n{caption}")
    else:
        save_report(None, uid, "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É.", reply_markup=main_menu_kb())
        bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û–±—â–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç {uid}: (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")

# ========== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline callback'–æ–≤ ==========
@bot.callback_query_handler(func=lambda call: True)
def callback_router(call):
    data = call.data or ""
    uid = call.from_user.id
    print(f"[callback] from {uid}: {data}")  # –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # parse key:arg where arg optional
    parts = data.split(":", 1)
    key = parts[0]
    arg = parts[1] if len(parts) > 1 else None

    # --- –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ ---
    if uid == ADMIN_ID:
        # –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∏
        if key == "admin_insights_back":
            # –ø—Ä—è–º–æ —Ç—É—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πü§µ", callback_data="admin_users"),
                types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤üé´", callback_data="admin_insights"),
                types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±üî¥", callback_data="admin_reports")
            )
            bot.edit_message_text(
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=kb
            )
            return

        if key == "admin_users":
            show_admin_users(call)
            return

        if key == "admin_insights":
            show_admin_insights(call)
            return

        if key == "admin_insight_detail":
            try:
                iid = int(arg)
                show_insight_detail(call, iid)
            except:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.", show_alert=True)
            return

        if key == "admin_reports":
            show_admin_reports(call)
            return

    # parse key:arg where arg optional
    parts = data.split(":", 1)
    key = parts[0]
    arg = parts[1] if len(parts) > 1 else None

    # --- preview send/edit/cancel ---
    if key == "preview_send":
        allowed, remaining = can_post_n_per_hour(uid)
        if not allowed:
            bot.answer_callback_query(call.id, f"‚è± –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —á–µ—Ä–µ–∑ —á–∞—Å.", show_alert=True)
            return

        bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤–ª—è—é...")
        temp_id = int(arg)
        if temp_id not in temp_previews:
            bot.answer_callback_query(call.id, "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏.", show_alert=True)
            return
        owner_id, text = temp_previews[temp_id]
        if owner_id != uid:
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return

        iid = save_insight(owner_id, text)
        mark_user_posted(owner_id)  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ñ–ª–∞–≥–∞ has_posted
        del temp_previews[temp_id]
        bot.send_message(owner_id,
                         f"–°–ø–∞—Å–∏–±–æ ‚Äî —Ç–≤–æ–π –∏–Ω—Å–∞–π—Ç –ø—Ä–∏–Ω—è—Ç. –°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë {remaining - 1} –∏–Ω—Å–∞–π—Ç–æ–≤ –≤ —á–∞—Å.",
                         reply_markup=main_menu_kb())

    if key == "preview_edit":
        bot.answer_callback_query(call.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        try:
            temp_id = int(arg)
        except:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é.", show_alert=True)
            return
        if temp_id not in temp_previews:
            bot.answer_callback_query(call.id, "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return
        owner_id, _ = temp_previews[temp_id]
        if owner_id != uid:
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return
        sent = bot.send_message(uid, "–û—Ç–ø—Ä–∞–≤—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å 800 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(sent, lambda m, tid=temp_id: handle_preview_edit(m, tid))
        return

    if key == "preview_cancel":
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.")
        try:
            temp_id = int(arg)
            if temp_id in temp_previews and temp_previews[temp_id][0] == uid:
                del temp_previews[temp_id]
        except:
            pass
        bot.send_message(uid, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())
        return

    # --- –ï—â—ë –∏–Ω—Å–∞–π—Ç ---
    if key == "more":
        bot.answer_callback_query(call.id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ—â—ë –∏–Ω—Å–∞–π—Ç...")
        info = get_user_info(uid)
        if not info or int(info[2]) == 0:
            bot.send_message(uid, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π. –ù–∞–∂–º–∏ üñä –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å–∞–π—Ç.", reply_markup=main_menu_kb())
            return
        cd = check_cooldown(uid)
        if cd > 0:
            bot.send_message(uid, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏: –µ—â—ë —Ä–∞–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Å–∞–π—Ç (–∫—É–ª–¥–∞—É–Ω {cd} –º–∏–Ω).")
            return
        row = get_random_insight_for_requester(uid)
        if not row:
            bot.send_message(uid, "–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb())
            return
        iid, text, author = row
        mark_delivered(uid, iid)
        set_user_cooldown(uid, minutes=COOLDOWN_MINUTES)
        bot.send_message(uid, f"–í–æ—Ç –∏–Ω—Å–∞–π—Ç:\n¬´{text}¬ª", reply_markup=insight_inline_kb(iid))
        return

    # --- –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ---
    if key == "share":
        bot.answer_callback_query(call.id)
        try:
            iid = int(arg)
        except:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.", show_alert=True)
            return

        row = get_insight_by_id(iid)
        if not row:
            bot.answer_callback_query(call.id, "–ò–Ω—Å–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        _, _, text, is_flagged, _ = row
        if is_flagged:
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –∏–Ω—Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞.", show_alert=True)
            return

        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞", callback_data=f"make_share:{iid}"))
        kb.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="share_close"))

        bot.send_message(uid,
                         "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ—Ç –∏–Ω—Å–∞–π—Ç –¥—Ä—É–∑—å—è–º –∏–ª–∏ –≤ –∫–∞–Ω–∞–ª. "
                         "–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞?",
                         reply_markup=kb)
        return

    # --- –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞ ---
    if key == "make_share":
        try:
            iid = int(arg)
        except:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        row = get_insight_by_id(iid)
        if not row:
            bot.answer_callback_query(call.id, "–ò–Ω—Å–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        text = row[2]
        share_text = f"¬´{text}¬ª‚Äì\n–ê–Ω–æ–Ω–∏–º\n\n–•–æ—á–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å —á—É–∂–∏–µ –º—ã—Å–ª–∏?\n@SoulShare1_bot"
        bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
        bot.send_message(uid, share_text)
        return

    if key in ("share_close", "close"):
        bot.answer_callback_query(call.id, "–ó–∞–∫—Ä—ã—Ç–æ.")
        return

    # --- –ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–Ω—Å–∞–π—Ç (inline) ---
    if key == "report":
        try:
            iid = int(arg)
        except:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–æ—Ä–º—É –∂–∞–ª–æ–±—ã...")
        sent = bot.send_message(uid, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã (–∫–æ—Ä–æ—Ç–∫–æ). –ü—Ä–∏–º–µ—Ä—ã: ¬´–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ¬ª, ¬´—É–≥—Ä–æ–∑–∞¬ª, ¬´–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ¬ª, ¬´—Å–ø–∞–º¬ª.")

        def after_reason(m):
            reason = m.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
            save_report(iid, m.from_user.id, reason, is_general=False)

            # ‚úÖ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(m.chat.id, "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")

            # üì¢ –∞–¥–º–∏–Ω—É
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–Ω—Å–∞–π—Ç", callback_data=f"delete:{iid}")
            )
            bot.send_message(
                ADMIN_ID,
                f"üö® –ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–Ω—Å–∞–π—Ç #{iid}\n"
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{m.from_user.username or m.from_user.id}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                reply_markup=kb
            )

        bot.register_next_step_handler(sent, after_reason)

    # --- –ê–¥–º–∏–Ω: delete (—É–¥–∞–ª–∏—Ç—å —Å—Ä–∞–∑—É) ---
    if key == "delete":
        # –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
        if uid != ADMIN_ID:
            bot.answer_callback_query(call.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        try:
            iid = int(arg)
        except:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        try:
            flag_insight(iid)
        except Exception as e:
            print("flag_insight error:", e)
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)
            return
        bot.answer_callback_query(call.id, "–ò–Ω—Å–∞–π—Ç —É–¥–∞–ª—ë–Ω ‚úÖ")
        # —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å —Å–Ω–æ–≤–∞
        try:
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
        except Exception:
            pass
        bot.send_message(ADMIN_ID, f"‚ùå –ò–Ω—Å–∞–π—Ç #{iid} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω (is_flagged=1).")
        return

    # default
    bot.answer_callback_query(call.id, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
    return

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
def handle_preview_edit(message, temp_id):
    err = validate_insight_text(message.text)
    if err:
        bot.send_message(message.chat.id, err, reply_markup=main_menu_kb())
        return
    if temp_id not in temp_previews or temp_previews[temp_id][0] != message.from_user.id:
        bot.send_message(message.chat.id, "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏.", reply_markup=main_menu_kb())
        return
    temp_previews[temp_id] = (message.from_user.id, message.text)
    bot.send_message(message.chat.id, f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–≤—å—é:\n¬´{message.text}¬ª", reply_markup=preview_kb(temp_id))

def handle_report_submission(message, insight_id):
    reason = message.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
    save_report(insight_id, message.from_user.id, reason)
    bot.send_message(message.chat.id, "üö© –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!", reply_markup=main_menu_kb())
    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–∏—Ç—å
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–Ω—Å–∞–π—Ç", callback_data=f"delete:{insight_id}"))
    insight = get_insight_by_id(insight_id)
    text = insight[2] if insight else "(–Ω–µ –Ω–∞–π–¥–µ–Ω)"
    bot.send_message(ADMIN_ID, f"üö® –ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–Ω—Å–∞–π—Ç #{insight_id}\n–¢–µ–∫—Å—Ç: {text}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=kb)

# ========== fallback: –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∫–∞–∫ –∏–Ω—Å–∞–π—Ç-–ø—Ä–µ–≤—å—é ==========
@bot.message_handler(func=lambda m: True, content_types=['text'])
def fallback(m):
    txt = m.text.strip()
    if txt in ("üñä –ù–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Å–∞–π—Ç", "üé≤ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"):
        return
    err = validate_insight_text(txt)
    if err:
        bot.send_message(m.chat.id, err, reply_markup=main_menu_kb())
        return
    temp_id = make_temp_id()
    temp_previews[temp_id] = (m.from_user.id, txt)
    bot.send_message(m.chat.id, f"–¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ:\n¬´{txt}¬ª", reply_markup=preview_kb(temp_id))

# ========== –ê–î–ú–ò–ù: –ü–ê–ù–ï–õ–¨ ==========
# --- 1. –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ---
def show_admin_users(call):
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, username, has_posted, messages_sent FROM users ORDER BY reg_date DESC")
    users = cur.fetchall()
    conn.close()

    if not users:
        bot.send_message(call.from_user.id, "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.")
        return

    text = "üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for u in users:
        text += f"ID: {u[0]} | @{u[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω'} | –û—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Å–∞–π—Ç: {'–î–∞' if u[2] else '–ù–µ—Ç'} | –°–æ–æ–±—â–µ–Ω–∏–π: {u[3]}\n"

    bot.send_message(call.from_user.id, text)

# --- 2. –°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤ ---
def show_admin_insights(call):
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute("SELECT id, author_id, text, is_flagged FROM insights ORDER BY created_at DESC")
    insights = cur.fetchall()
    conn.close()

    if not insights:
        bot.send_message(call.from_user.id, "–°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    kb = types.InlineKeyboardMarkup()
    for i in insights:
        display_text = (i[2][:30] + "...") if len(i[2]) > 30 else i[2]
        kb.add(types.InlineKeyboardButton(f"#{i[0]}: {display_text}", callback_data=f"admin_insight_detail:{i[0]}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_insights_back"))

    bot.send_message(call.from_user.id, "üìù –°–ø–∏—Å–æ–∫ –∏–Ω—Å–∞–π—Ç–æ–≤:", reply_markup=kb)

# --- 3. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Å–∞–π—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–∏—Ç—å/–Ω–∞–∑–∞–¥ ---
def show_insight_detail(call, iid):
    insight = get_insight_by_id(iid)
    if not insight:
        bot.send_message(call.from_user.id, f"–ò–Ω—Å–∞–π—Ç #{iid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"üìÑ –ò–Ω—Å–∞–π—Ç #{iid}\n–ê–≤—Ç–æ—Ä: {insight[1]}\n\n{(insight[2][:300] + "...") if len(insight[2]) > 300 else insight[2]}\n\n–§–ª–∞–≥: {'–î–∞' if insight[3] else '–ù–µ—Ç'}"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–Ω—Å–∞–π—Ç", callback_data=f"delete:{iid}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_insights"))

    bot.send_message(call.from_user.id, text, reply_markup=kb)

# --- 4. –°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–± –Ω–∞ –∏–Ω—Å–∞–π—Ç—ã ---
def show_admin_reports(call):
    conn = sqlite3.connect("insight.db")
    cur = conn.cursor()
    cur.execute("""
        SELECT r.id, r.insight_id, r.user_id, r.reason, i.text
        FROM reports r
        LEFT JOIN insights i ON r.insight_id = i.id
        ORDER BY r.created_at DESC
    """)
    reports = cur.fetchall()
    conn.close()

    if not reports:
        bot.send_message(call.from_user.id, "–°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–± –ø—É—Å—Ç.")
        return

    for r in reports:
        iid = r[1]
        report_text = r[4] if r[4] else "(–ò–Ω—Å–∞–π—Ç —É–¥–∞–ª—ë–Ω)"
        msg = (
            f"üö® –ñ–∞–ª–æ–±–∞ #{r[0]}\n"
            f"–ò–Ω—Å–∞–π—Ç ID: {iid}\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {r[2]}\n"
            f"–¢–µ–∫—Å—Ç –∏–Ω—Å–∞–π—Ç–∞: {report_text}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {r[3]}"
        )
        kb = types.InlineKeyboardMarkup()
        if iid:
            kb.add(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–Ω—Å–∞–π—Ç", callback_data=f"delete:{iid}"))
        bot.send_message(call.from_user.id, msg, reply_markup=kb)


# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    print("Bot started")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)